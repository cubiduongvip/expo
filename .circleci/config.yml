version: 2.1

commands:
  install_nix:
    steps:
      - run: curl https://nixos.org/releases/nix/nix-2.1.2/install | bash -s -- --no-daemon
      - run: echo ". ~/.nix-profile/etc/profile.d/nix.sh" >> ~/.bash_profile
  setup:
    steps:
      # ssh: used in circleci checkout steps
      # direnv: used to configure environment with .envrc files
      - run: nix-env -iA nixpkgs.openssh nixpkgs.direnv
      - run: mkdir -p ~/.config/direnv
      - run: echo -e "[whitelist]\nprefix = [ \"$HOME\" ]" > ~/.config/direnv/config.toml
      - run: echo 'eval "$(direnv export bash)"' >> ~/.bash_profile
      - checkout
  submodule_update:
    steps:
      - run: git submodule update --init
  fetch_cocoapods_specs:
    steps:
      - run: curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
  restore_yarn_cache:
    steps:
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}
  save_yarn_cache:
    steps:
      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn  # `yarn cache dir`
  yarn:
    parameters:
      command:
        type: string
      working_directory:
        type: string
    steps:
      - run:
          working_directory: << parameters.working_directory >>
          command: nix run pkgs.yarn -c yarn << parameters.command >>

executors:
  nix:
    docker:
      - image: lnl7/nix:latest
    resource_class: small
    working_directory: ~/expo
    shell: /run/current-system/sw/bin/bash -leo pipefail
  mac:
    macos: # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: "10.0.0"
    working_directory: /Users/distiller/project
    shell: /bin/bash -leo pipefail

workflows:
  version: 2

  # JavaScript packages that make up the SDK
  sdk:
    jobs:
      - expo_sdk
      - babel_preset

  # Android and iOS clients
  client:
    jobs:
      - home
      - client_ios
  #     - shell_app_sim_base_ios
  #     - shell_app_ios_tests:
  #         requires:
  #           - shell_app_sim_base_ios
  #           - test_suite_publish
  #     - test_suite_publish
  #     - client_android
  #     - client_android_tests:
  #         requires:
  #           - test_suite_publish
  #     - shell_app_base_android_new

jobs:
  expo_sdk:
    executor: nix
    steps:
      - setup
      - submodule_update
      - restore_yarn_cache
      - yarn:
          command: install
          working_directory: ~/expo
      - save_yarn_cache
      # Add back linting once we get ESLint or TSLint set up
      - yarn:
          command: jest --maxWorkers 1
          working_directory: ~/expo/packages/expo

  babel_preset:
    executor: nix
    steps:
      - setup
      - submodule_update
      - restore_yarn_cache
      - yarn:
          command: install
          working_directory: ~/expo
      - save_yarn_cache
      - yarn:
          command: lint --max-warnings 0
          working_directory: ~/expo/packages/babel-preset-expo
      - yarn:
          command: jest --maxWorkers 1
          working_directory: ~/expo/packages/babel-preset-expo

  home:
    executor: nix
    steps:
      - setup
      - submodule_update
      - restore_yarn_cache
      - yarn:
          command: install
          working_directory: ~/expo
      - save_yarn_cache
      - yarn:
          command: jest --maxWorkers 1
          working_directory: ~/expo/home

  client_ios:
    executor: mac
    steps:
      - install_nix
      - setup
      - fetch_cocoapods_specs
      - yarn:
          command: install
          working_directory: ~/project/tools-public
      - run: nix run pkgs.nodejs-8_x -c ~/project/tools-public/generate-files-ios.sh
      - run: fastlane ios create_simulator_build
